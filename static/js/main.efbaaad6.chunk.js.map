{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/reducer_posts.js","components/PostIndex.js","components/PostsNew.js","components/PostShow.js","index.js"],"names":["FETCH_POSTS","FETCH_POST","CREATE_POST","DELETE_POST","ROOT_URL","API_KEY","rootReducer","combineReducers","posts","state","arguments","length","undefined","action","type","_","mapKeys","payload","data","Object","objectSpread","defineProperty","id","omit","form","formReducer","PostIndex","this","props","fetchPosts","map","post","react_default","a","createElement","className","key","react_router_dom_es","to","concat","title","renderPosts","React","Component","connect","request","axios","get","PostsNew","field","_field$meta","meta","touched","error","validation","label","assign","text","input","values","_this","createPost","history","push","handleSubmit","onSubmit","bind","redux_form_es","name","component","renderField","reduxForm","validate","errors","categories","content","callback","then","PostShow","match","params","fetchPost","deletePost","onClick","onDeleteClick","_ref","ownProps","delete","store","applyMiddleware","promise","createStore","createStoreWithMiddleware","ReactDOM","render","es","path","exact","PoststNes","Postshow","document","querySelector"],"mappings":"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","file":"static/js/main.efbaaad6.chunk.js","sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nexport const FETCH_POSTS = 'fetch_posts';\r\nexport const FETCH_POST = 'fetch_post';\r\nexport const CREATE_POST = 'create_post';\r\nexport const DELETE_POST = 'delete_post';\r\n\r\nconst ROOT_URL = 'http://reduxblog.herokuapp.com/api';\r\nconst API_KEY = '?key=PAPERCLIP1235';\r\n\r\nexport function fetchPosts() {\r\n  const request = axios.get(`${ROOT_URL}/posts${API_KEY}`);\r\n\r\n  return{\r\n    type: FETCH_POSTS,\r\n    payload: request\r\n  }\r\n}\r\n\r\nexport function createPost(values, callback){\r\n  const request = axios.post(`${ROOT_URL}/posts${API_KEY}`, values)\r\n  .then(() => callback());\r\n\r\n  return {\r\n    type: CREATE_POST,\r\n    payload: request\r\n  }\r\n}\r\n\r\nexport function fetchPost(id){\r\n  const request = axios.get(`${ROOT_URL}/posts/${id}${API_KEY}`);\r\n  return {\r\n    type: FETCH_POST,\r\n    payload: request\r\n  }\r\n}\r\n\r\nexport function deletePost(id, callback){\r\n  axios.delete(`${ROOT_URL}/posts/${id}${API_KEY}`)\r\n  .then(() => callback());\r\n  return {\r\n    type: DELETE_POST,\r\n    payload: id\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport {reducer as formReducer } from 'redux-form';\r\nimport PostsReducer from './reducer_posts';\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: PostsReducer,\r\n  form: formReducer\r\n});\r\n\r\nexport default rootReducer;","import { FETCH_POSTS, FETCH_POST, DELETE_POST } from '../actions';\r\nimport _ from 'lodash';\r\n\r\nexport default function(state = {}, action) {\r\n  switch(action.type) {\r\n    case FETCH_POSTS:\r\n      return _.mapKeys(action.payload.data, 'id');\r\n    case FETCH_POST:\r\n      return { ...state, [action.payload.data.id]: action.payload.data };\r\n    case DELETE_POST:\r\n      return _.omit(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { fetchPosts } from '../actions';\r\nimport _ from 'lodash';\r\n\r\nclass PostIndex extends React.Component {\r\n    componentDidMount(){\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    renderPosts(){\r\n        return _.map(this.props.posts, post => {\r\n            return(\r\n                <li className=\"list-group-item\" key={post.id}>\r\n                    <Link to={`/posts/${post.id}`}>\r\n                        {post.title}\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className=\"text-xs-right\">\r\n                    <Link className=\"btn btn-primary\" to=\"/posts/new\">\r\n                        Add a Post\r\n                    </Link>\r\n                </div>\r\n                <h3>\r\n                    Posts\r\n                </h3>\r\n                <ul className=\"list-group\">\r\n                    {this.renderPosts()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return { posts: state.posts };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(PostIndex);","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions'\r\n\r\nimport './PostNew.css';\r\n\r\nclass PostsNew extends React.Component {\r\n    renderField(field){\r\n        const { meta: { touched, error }} = field;\r\n        const validation = `${error && touched ? 'is-invalid' : 'is-valid'}`\r\n        return(\r\n            <div className=\"form-group\">\r\n                <label>{field.label}</label>\r\n                <input\r\n                    className={`form-control ${touched ? validation : ''}`}\r\n                    type={field.text}\r\n                    {...field.input}\r\n                />\r\n                <div className=\"text-help\">\r\n                    {touched ? error : ''}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onSubmit(values){\r\n        this.props.createPost(values, () =>  {\r\n            this.props.history.push('/')\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const { handleSubmit } = this.props;\r\n        return (\r\n            <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>\r\n                <Field\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    type=\"text\"\r\n                    component={this.renderField}\r\n                />\r\n                <Field\r\n                    label=\"Categories\"\r\n                    name=\"categories\"\r\n                    type=\"text\"\r\n                    component={this.renderField}\r\n                />\r\n                <Field\r\n                    label=\"Post Content\"\r\n                    name=\"content\"\r\n                    type=\"text\"\r\n                    component={this.renderField}\r\n                />\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                </button>\r\n                <Link to=\"/\" className=\"btn btn-danger\">Cancel</Link>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nfunction validate(values) {\r\n    const errors = {};\r\n\r\n    if(!values.title){\r\n        errors.title = \"Enter a title\";\r\n    }\r\n    else if(values.title.length < 3){\r\n        errors.title = \"The title need to be longer than 3 characters\";\r\n    }\r\n    if(!values.categories){\r\n        errors.categories = \"Enter some categories\";\r\n    }\r\n    if(!values.content){\r\n        errors.content = \"Enter some content please\";\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default reduxForm({\r\n    validate,\r\n    form: 'PostsNewForm'\r\n})(\r\n    connect(null, { createPost })(PostsNew)\r\n);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchPost, deletePost } from '../actions';\n\nclass PostShow extends React.Component {\n    componentDidMount() {\n        if(!this.props.post){\n            const { id }  = this.props.match.params;\n            this.props.fetchPost(id);\n        }\n    }\n\n    onDeleteClick(){\n        const { id }  = this.props.match.params;\n        this.props.deletePost(id, () => {\n            this.props.history.push('/')\n        });\n    }\n\n    render() {\n        const { post } = this.props;\n\n        if(!post){\n            return <div>Loading</div>\n        }\n        \n        return (\n            <div>\n                <Link to=\"/\">Back To Index</Link>\n                <button\n                    className=\"btn btn-danger pull-xs-right\"\n                    onClick={this.onDeleteClick.bind(this)}\n                >\n                    Delete Post\n                </button>\n                <h3>{post.title}</h3>\n                <h6>Categories: {post.categories}</h6>\n                <p>{post.content}</p>\n            </div>\n        );\n    }   \n}\n\nfunction mapStateToProps({ posts }, ownProps) {\n    return { post: posts[ownProps.match.params.id]}\n}\n\nexport default connect(mapStateToProps, { fetchPost, deletePost })(PostShow);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport rootReducer from './reducers';\nimport PostIndex from './components/PostIndex'\nimport PoststNes from './components/PostsNew'\nimport Postshow from './components/PostShow'\n\nconst createStoreWithMiddleware = applyMiddleware(\n  promise,\n)(createStore);\n\nconst store = createStoreWithMiddleware(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n        <BrowserRouter>\n            <div>\n                <Switch>\n                    <Route path=\"/\" exact component={PostIndex} />\n                    <Route path=\"/posts/new\" component={PoststNes} />\n                    <Route path=\"/posts/:id\" component={Postshow} />\n                </Switch>\n            </div>\n        </BrowserRouter>\n  </Provider>\n  , document.querySelector('#root'));"],"sourceRoot":""}